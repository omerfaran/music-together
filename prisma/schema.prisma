// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// The env("DATABASE_URL) means we get the url from .env DATABASE_URL key

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  passwordHash  String
  image         String?
  accounts      Account[]
  member        Member? // one to one, a user can have one member
}

model Member {
  id          String   @id @default(cuid())
  userId      String   @unique // this affectevely creates the relationship with User model
  name        String // we already got name on the user, but duplicating it gives us the option to directly get it from the member
  gender      String
  dateOfBirth DateTime
  created     DateTime @default(now())
  updated     DateTime @default(now())
  description String
  city        String
  country     String
  image       String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[] // one to many relationship. Member can have many photos
  sourceLikes Like[]   @relation("source") // many to many, people can like the the member
  targetLikes Like[]   @relation("target") // continuation of the many to many, member can like many people
}

model Photo {
  id       String  @id @default(cuid())
  url      String
  publicId String? // that's from the cloud service of where we store the photo

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Like {
  sourceUserId String
  sourceMember Member @relation("source", fields: [sourceUserId], references: [userId], onDelete: Cascade)

  targetUserId String
  targetMember Member @relation("target", fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@id([sourceUserId, targetUserId])
}
